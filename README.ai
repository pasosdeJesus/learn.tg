# Learn.tg - Project Architecture Analysis

## Overview

Learn.tg is a live, production gamified educational platform making learning engaging and rewarding. Students complete quality content through interactive guides and games, earning USDT cryptocurrency rewards for perfect answers. The platform is currently operational at https://learn.tg with multiple courses across different subjects.

---

## Architecture Stack

### 1. **Major Backend: Rails (servidor/)**
- **Framework:** Ruby on Rails (>= 3.4)
- **Database:** PostgreSQL (>= 16.2) with unaccent extension
- **Purpose:** Course management, guide organization, user data persistence, teacher administration
- **Based on:** MSIP and cor1440_gen frameworks
- **Authentication:** Token-based (receives JWT tokens from frontend)
- **Key Models:** Courses, Chapters, Guides, Users, Submissions
- **Admin Interface:** Teachers organize courses into chapters and guides via `/learntg-admin`

### 2. **Smart Contracts: Hardhat (packages/hardhat/)**
- **Language:** Solidity ^0.8.24
- **Network:** Celo (testnet: celoSepolia, mainnet: celo)
- **Main Contract:** `ScholarshipVaults.sol`
  - Manages USDT reward distribution per course
  - Creates vaults with configurable rewards per guide
  - Implements 24-hour cooldown between submissions
  - Splits deposits: 80% to vault, 20% to learn.tg operations
  - Releases rewards only for perfect guide completions
- **Token:** USDT (ERC20 compatible)
- **ABI Sync:** Automatic sync to frontend during compilation

### 3. **Frontend: Next.js (packages/nextjs-app/)**
- **Framework:** Next.js with React + TypeScript
- **Purpose:** User interface, content delivery, SIWE authentication
- **Authentication:** Sign-In With Ethereum (SIWE)
  - Users connect with OKX wallet (or other Web3 wallets)
  - Generates JWT token for Rails backend
  - No password required - wallet-based authentication
- **API Routes:**
  - `/api/auth/[...nextauth]` - SIWE authentication
  - `/api/guide` - Fetch guide content
  - `/api/crossword` - Crossword game logic
  - `/api/check_crossword` - Validate crossword answers
  - `/api/scholarship` - Reward distribution
- **Internationalization:** Multi-language support ([lang] dynamic routes)
- **Content Rendering:** Markdown guides with embedded questions

---

## Content Structure (resources/)

### Course Organization
```
Course
  └─ Guide (guide1.md, guide2.md, etc.)
      └─ Reading comprehension questions
          └─ Game: Crossword puzzle
              └─ Perfect answer → USDT reward
```

### Public Courses (in repository)
1. **English:** "A Relationship with Jesus" (4 guides)
2. **Spanish:** 
   - "Una Relación con Jesús" (4 guides)
   - "Ahorra en Dólares en OKX" (4 guides)

**Note:** Live platform at learn.tg contains additional private courses managed through the Rails admin interface.

### Guide Format
- Markdown-based content
- Reading comprehension questions
- Reflection and application sections
- Crossword game for answer validation

---

## Authentication & Communication Flow

1. **Frontend (Next.js):** User connects OKX wallet → SIWE signature
2. **Frontend:** Validates signature → generates JWT token
3. **Major Backend (Rails):** Receives token in requests → authenticates user
4. **Smart Contract:** Validates perfect completion → releases USDT rewards

**Key Point:** SIWE is implemented in the frontend; Rails backend uses token-based authentication for API communication.

---

## Reward System

**Trigger:** Student completes guide with perfect crossword answer

**Process:**
1. Frontend submits crossword answer to `/api/check_crossword`
2. Backend validates answer against guide questions
3. If perfect: calls `submitGuideResult()` on ScholarshipVaults contract
4. Contract verifies:
   - Student hasn't received reward for this guide
   - 24-hour cooldown has passed since last submission
   - Vault has sufficient USDT balance
5. If all checks pass: transfers `amountPerGuide` USDT to student's wallet

**Cooldown:** 24 hours between submissions per course per student (prevents gaming)

---

## Key Technologies

| Component | Tech | Purpose |
|-----------|------|----------|
| Major Backend | Rails + PostgreSQL | Course/user management, admin interface |
| Smart Contracts | Solidity + Hardhat | USDT reward distribution, vault management |
| Frontend | Next.js + React + TypeScript | UI, content delivery, SIWE auth |
| Blockchain | Celo | USDT transfers, decentralized rewards |
| Content | Markdown | Guide storage, version control |
| Wallet | OKX | User authentication and reward receipt |

---

## Development & Deployment

- **Start order:** Rails backend first, then Next.js frontend
- **Environment:** adJ 7.6 recommended (includes all dependencies)
- **Testing:** Hound CI, CodeClimate integration
- **Code Quality:** Automated linting and security checks
- **Live Deployment:** Running at https://learn.tg

---

## Impact

Learn.tg demonstrates that education can be engaging, transparent, and rewarding. By combining quality content with gamification and cryptocurrency incentives, the platform:
- Makes learning fun and interactive
- Provides tangible rewards for achievement
- Uses blockchain for transparent, trustless reward distribution
- Enables teachers to create and manage courses globally
- Supports multiple languages and subjects
